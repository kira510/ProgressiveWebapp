Progressive Web apps:
  Add certain features to a web application basically enhance web aps to look and feel like native mobile
  apps. Some characteristics of PWA are,
    1. Reliable: load fast and provide offline functionality
    2. Fast:  Respond quickly to user actions
    3. Engaging: Feel like native app on mobile devices.

Things to know about your browser:
  applications -> service worker, storage, toggle online offline, session storage, cookies, cache
  Network -> disable cache, toggle offline, online

Core Building blocks
  Service Workers: are supported in modern browers,
    They are javascript programme running in background even if your application is closed. They are the Core
    building block because they allow us to get offline access to cache some files and serve them if we dont
    have internet connection.
    They are user for:
          1. Background sync: sync user data in background
          2. web push: mobile like push notifications
  Application Manifest: makes application installable on homescreen.
  Responsive Design

SPAs vs PWAs
  SPA:
    1. powered by javascript
    2. Highly reactive to user input
    3. only HTML file sent to browser
  PWA:
    1. Uses a lot of javascript (but works without it)
    2. Highly reactive (main focus on initial loading time reduction)
    3. Works with multiple files

Project structure
  Normal nodejs project with http-server running the main index.js (see package.json)
    npm start => "http-server -c-1"
  -c-1 flag will ensure that we dont cache any assets using the normal browser cache.
  There are two caches, browser cache and service worker cache.

Web App Manifest
  Makes your web app installable. This will help your website behave like a native webapp.

Manifest.json
  Add this link of type manifest in all the index.htlm pages you use.
      <link rel="manifest" href="/manifest.json">
  Its a Json file with several key properties,
    {
      name: 'long name of the app',
      short_name: 'sweaty',                        //short name for app
      start_url: '/index/html',                    //which page to load on startup
      scope: '.',                                  //pages included in PWA experience
      display: 'standalone',                       //should it look like a standalone app
      background_color: '#fff',                    //Background whilst loading
      theme_color: '#3f51b5',                      //Theme color(eg: on top bat in task switcher)
      description: 'keep runnin untill you are super sweaty,
      dir: 'ltr',                                  //Read direction of your app, left to right
      lang: 'en-US',
      orientation: 'potraid-primary',              //landscape or potrait or any
      icons: [...],
      related-applications: [...]
    }

    icons: [
      {
        src: '../../../public/image/some.png',
        type: 'omage/png',
        sizes: '48x48'                              //best size for browser
      },
      {
        .
        .
        .
      }
    ]

    related-applications: [
      {
        platform: 'play',
        url: 'bla bla bla',
        id: 'some id'
      }
    ]

  display: standalone, fullscreen, minimal-ui (standalone but minimal ui options), browser

Android studio
  This can be used to simulate a mobile environment. I created a virtual pixel 3 using this.
  Install android studio and then create a mobile environment through AVD manager.
  To navigate to your http://localhost:8080 ,
      => http://10.0.2.2:8080 : this is proxy to your localhost.

Application Tab in Chrome:
  Manifest:
    Used to detect the manifest.json written in the project.

Standalone App
  Now click on the three dots at the top right and click -> "Add to home screen" ,
  this will create an icon on the hoescreen with the short name you gave in manifest as default.
  Now when you click on this, it opens like a standalone app unlike before where the main bar
  at top is of chrome.

Service Workers
  This makes our application work in background and offline ready. Helps us acheive push notifications
  and backgroung synchronization.
  1. Runs on additinal thread and decoupled from the HTML pages
  2. Manages All Pages of a given scope(ex all pages of a domain)
  3. Lives on even after pages have been closed

"Listenable" Events in service worker
  1. Fetch: Browser or page-related JS initiates a Fetch (http request)
  2. Push notifications: Service worker receives Web Push Notification (from server)
  3. Notification interaction: User interacts with displayed Notification
  4. Background Sync: Service Worker receives Background Sync Event (ex: internet connection restored)
  5. Service Worker Lifecycle: service worker Phase changes

Service Worker Lifecycle
  1. index.html loads app.js on browser
  2. Registration: if allowed to register (runs a sw.js) by user
  3. Installation: fires an install Event
  4. Activation: fires activate Event, service worker now controls all pages of scope
  5. Idle: it becomes Idle
  6. Termination: sleeps and listens for Events

Service workers and https
  Service workers work only with https, why?
    It has lot of power, you can intercept any request. So you must ensure that it is served on a
    secure host and not on any host it is encrypted and not abused.

Service worker Activation
  If you open your app in a tab and reload after changing service worker, it does not activate it
  again, activation will be pending (browser -> application -> Service Worker).
  You must close the existing tab and open a new one to activate it.
  Other ways in Browser -> Application,
    1. check "Update on reload"
    2. click on "Update" or "Unregister"
    3. click on "skip waiting"
  These are tricks for development mode but "not production".

Service worker non-life cycle Events (others apart from install and activate)
  example: fetch
  Fetch is triggered by your web application.
  Install and activate is triggered by your browser while installing and activating the service worker.

Connecting to emulated device browser from your laptop browser:
  We can click on browser settings -> more -> remote devices.
  Here you can see your device, add a route that localhost:8080 of device redirects localhost:8080 of your
  laptop in the settings tab of Remote devices. After this, click on the device and add new url
  localhost:8080 , click on inspect and see the magic.

BeforeInstallPrompt
  Docs: https://developer.mozilla.org/en-US/docs/Web/API/BeforeInstallPromptEvent
  Whenever a browser detects a PWA, it basically triggers this event before prompting the user to install
  the PWA on their webscreen.
  You can block this and control the prompt yourself. For example, store the event in a variable and use it
  when user clicks on the event only.
    window.addEventListener('beforeinstallprompt', (event) => {
      event.preventDefault();
      deferredPrompt = event;
      return false;
    });

  Example code to control the prompt.
    if (deferredPrompt) {
      deferredPrompt.prompt();

      deferredPrompt.userChoice.then((choiceResult) => {
        console.log(choiceResult);

        if (choiceResult.outcome === 'dismissed') {
          console.log('User cancelled installation');
        } else {
          console.log('User added to homescreen');
        }

        deferredPrompt = null;
      })
    }

Fetch and CORS
  Sometimes when you try to fetch, your server might not be in the same region of the server sending
  the response , at times like that you can set the mode to 'no-cors' to avoid an error saying that
  no cross origin headers was found where you will get a response without any data.
    fetch('some url', {
      mode: 'no-cors' //by default, its set to cors
    })

Fetch vs Ajax
  See the code example in app.js
  DOCS for fecth api usage in detail: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch

FetchEvent.respondWith()
  docs: https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith
  This is used after the registration of serviceworker.

The Cache API
  Multiple caching available:
    1. server cache: not available for offline access
    2. browser cache: managed by browser, we cant tell what to cache and what not to
    3. cachi-api: a separate cache available in browser that can be programmed by the users to select the items
        to be cached.
  This API has following methods,
    1. key: reques, value: response
    2. Can be access through "Service Worker" and "Normal JS"

  When offline, you cant access the cache via Normal js cause this does not load since we cannot reach the server.
  Hence service worker is the best way to go.

Caching
  Docs
    https://developer.mozilla.org/en-US/docs/Web/API/Cache
  When?
    During the installation of the service worker.
  What?
    index.html, app.js, app.css, image.png
  How?
    The below piece of code is the best example, event waitUntill makes the JS wait till the promise
    called inside it is resolved.
    Docs: https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil
        self.addEventListener('install', (event) => {
          console.log('[Service Worker] installing ', event);

          //open a new cache and give your own name
          event.waitUntil(
            caches.open('static')
              .then((cache) => {
                console.log('[Service worker] Precaching App shell');
                cache.add('/');
                cache.add('/index.html');
                cache.add('/src/js/app.js');
              })
          )
        });
    NOTE: We are caching '/', imagine these as requests and not actual path. We are caching the actual
    request, for ex: cache.add('/index.html'); is actual caching of the response of localhost://index.html.

Steps done in caching
  1. Static and dynamic caching
    Caching must be done in the installation phase of the service worker, where you add all the static
    caches. Refer app.js .
        self.addEventListener('install', (event) => {
            event.waitUntil(
              caches.open(CACHE_STATIC_NAME)
                .then((cache) => {
                  console.log('[Service worker] Precaching App shell');
                  cache.addAll([
                    '/',
                    '/index.html',
                    '/main.css'
                  ]);
                })
            )
          });
    You can see that we are using waitUntill because the code will runthrough without waitin for the cache
    to open and add the requests.
  2. Dynamic
    What about the requests sent during the user operations?
          self.addEventListener('fetch', (event) => {
            event.respondWith(
              caches.match(event.request)
                .then((response) => {
                  if (response) {
                    return response;
                  }

                  return fetch(event.request)
                    .then((res) => {
                      return caches.open(CACHE_DYNAMIC_NAME)
                        .then((cache) => {
                          cache.put(event.request.url, res.clone());
                          return res;
                        })
                    });
                })
                .catch(err => {
                  console.log(err);
                })
            );
          });
    You can use event.respondWith to intercept the fetch call and chain a promise return based on what you wanna
    return.
    DOCS: https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith

  3. Clearing cache: versioning
    Done during activation event.
    Why? In this code we use a const but usually in PROD based apps we fetch a const version from the evn variables
    like the github release version, we look for the caches that are not the latest and remove them. Cool huh!
        self.addEventListener('activate', (event) => {
          event.waitUntil(
            caches.keys()
              .then((keyList) => {
                return Promise.all(keyList.map((key) => {
                  if (key !== CACHE_STATIC_NAME && key !== CACHE_DYNAMIC_NAME) {
                    console.log('[Service Worker] Removing old cache', key);
                    return caches.delete(key);
                  }
                }));
              })
          )
          return self.clients.claim(); //maynot be used but could create problems
        });

NOTE: you can observe that we are doing a resp.clone() to consume the response.
      Please note that you can use the response only once, if you return response after using it in the code
      then it will become null. This is a behaviour.
      Exmplanation here: https://jakearchibald.com/2014/reading-responses/